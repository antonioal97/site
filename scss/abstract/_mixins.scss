/**
*@ Pseudo elementos
*/
@mixin pseudo($content: "",$display: block,$pos: absolute)
{
  content:    $content;
  display:    $display;
  position:   $pos;
}
/**
*@ Box-Shadow
*/
@mixin box-shadow($shadow1, $shadow2: false, $shadow3: false, $shadow4: false)
{
  $params: $shadow1;
    @if $shadow2
    {$params: $shadow1, $shadow2;}
      @if $shadow3 != false
      {$params: $shadow1, $shadow2, $shadow3}
        @if $shadow4 != false
        {$params: $shadow1, $shadow2, $shadow3, $shadow4}
    -webkit-box-shadow: $params;
      -moz-box-shadow: $params;
          box-shadow: $params;
}
/**
*@ Texto Transparente
*/
@mixin transparent-text ($cor-1,$cor-2,$cor-3){
    background:linear-gradient(
		/* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
			to right,
			$cor-1, 
			$cor-2, 
			$cor-3);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

/*    --- --- --- --- FLEX-CONTAINER E FLEX ITENS--- --- --- ---    
  Alguns mixins de flex-itens que utilizei no projeto
*/
@mixin flexbox()
{
  display: -webkit-flex;
   display: -webkit-box;
   display: -ms-flexbox;
	   display: -moz-flex;
	        display: flex;
};
//Flex Direction
// row | row-reverse | column | column-reverse
@mixin flex-direction($value: row)
{
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	   -moz-flex-direction: $value;
	    -ms-flex-direction: $value;
	        flex-direction: $value;
}
// flex-start | flex-end | center | space-between | space-around 
@mixin justify-content($justify: flex-start) {
	@if $justify == flex-start {
		-webkit-box-pack: start;
		    -ms-flex-pack: start;
	} @else if $justify == flex-end {
		-webkit-box-pack: end;
		   -ms-flex-pack: end;
	} @else if $justify == space-between {
		-webkit-box-pack: justify;
		   -ms-flex-pack: justify;
	} @else if $justify == space-around {
		-ms-flex-pack: distribute;		
	} @else {
		-webkit-box-pack: $justify;
		   -ms-flex-pack: $justify;
	}
	-webkit-justify-content: $justify;
	   -moz-justify-content: $justify;
	        justify-content: $justify;
}
// flex-start | flex-end | center | baseline | stretch 
@mixin align-items($align: stretch) {
	@if $align == flex-start {
		-webkit-box-align: start;
		   -ms-flex-align: start;
	} @else if $align == flex-end {
		-webkit-box-align: end;
		   -ms-flex-align: end;
	} @else {
		-webkit-box-align: $align;
		   -ms-flex-align: $align;
	}
	-webkit-align-items: $align;
	   -moz-align-items: $align;
	        align-items: $align;
}
// auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($align: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $align;
	   -moz-align-self: $align;
	@if $align == flex-start {
		-ms-flex-item-align: start;
	} @else if $align == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $align;
	}
	align-self: $align;
}
// <positive-number>, initial, auto, or none
@mixin flex($fg: 1, $fs: null, $fb: null) {
    
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
     -moz-box-flex: $fg-boxflex;
      -webkit-flex: $fg $fs $fb;
	       -moz-flex: $fg $fs $fb;
	        -ms-flex: $fg $fs $fb;
	            flex: $fg $fs $fb;
}
//****************************************************************************//


